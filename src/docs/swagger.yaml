openapi: 3.0.3
info:
  title: Task Management API
  description: API documentation for the Task Management backend.
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://your-live-url.com/api
    description: Production server

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: Validation error or bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Log in an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
            
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks (admin sees all, user sees own)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, in-progress, completed]
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    post:
      tags:
        - Tasks
      summary: Create a new task
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Validation error or bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get a task by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    put:
      tags:
        - Tasks
      summary: Update a task by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Validation error or bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    delete:
      tags:
        - Tasks
      summary: Delete a task by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardSuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /report:
    get:
      tags:
        - Reports
      summary: Get platform-wide task report (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin report retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      totalTasks:
                        type: integer
                      byStatus:
                        type: array
                        items:
                          type: object
                          properties:
                            status:
                              type: string
                            count:
                              type: integer
        '403':
          description: Forbidden

  /reports/report-time:
    get:
      tags:
        - Reports
      summary: Get total time spent on tasks (for user or platform)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: false
          description: Optional userId. Admins can pass any userId. Users must omit or match their own ID.
      responses:
        '200':
          description: Time report retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        nullable: true
                      totalTimeSpentSeconds:
                        type: number
        '403':
          description: Forbidden

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        role:
          type: string
          enum: [user, admin]

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    AuthSuccessResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Login successful
        data:
          type: object
          properties:
            token:
              type: string
              example: your.jwt.token.here

    ValidationErrorResponse:
      type: object
      description: Validation error response from Zod validation failures
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: "invalid_type"
                description: Zod error code
              message:
                type: string
                example: "Expected string, received number"
                description: Human-readable error message
              path:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: number
                example: ["email"]
                description: Path to the invalid field
      example:
        errors:
          - code: "invalid_type"
            message: "Expected string, received number"
            path: ["email"]
          - code: "too_small"
            message: "String must contain at least 6 character(s)"
            path: ["password"]

    ApiErrorResponse:
      type: object
      description: Custom API error response for business logic errors
      properties:
        error:
          type: string
          example: "User not found"
          description: Error message
        details:
          type: object
          description: Optional additional error details
          example: { "userId": "12345" }
      example:
        error: "Invalid credentials"

    InternalServerErrorResponse:
      type: object
      description: Internal server error response
      properties:
        error:
          type: string
          example: "Internal Server Error"
      example:
        error: "Internal Server Error"
    
    CreateTaskRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in-progress, completed]
        userId:
          type: string

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in-progress, completed]

    TaskResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Task retrieved successfully"
        data:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
            description:
              type: string
            status:
              type: string
            userId:
              type: string

    StandardSuccessResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
          nullable: true
          description: Optional data payload

    PaginatedTaskResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          type: object
          properties:
            pagination:
              type: object
              properties:
                totalRecords:
                  type: integer
                totalPages:
                  type: integer
                currentPage:
                  type: integer
                hasMore:
                  type: boolean
            data:
              type: array
              items:
                $ref: '#/components/schemas/TaskResponse'